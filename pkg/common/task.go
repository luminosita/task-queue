// Package common provides primitives for task registration and marshalling of task request data
package common

import "github.com/mnikita/task-queue/pkg/log"

//TaskHandlerCallback handles results generated by task handler
type TaskHandlerCallback interface {
	HandleResult(a ...interface{}) error
}

//TaskHandler handles task requests
type TaskHandler interface {
	SetCallback(callback TaskHandlerCallback)
	Handle() error
}

//Task struct contains task requests data
type Task struct {
	Name    string
	Payload []byte
}

type TaskThreadError struct {
	threadId int
	err      error
}

func (err *TaskThreadError) Error() string {
	return err.err.Error()
}

func NewTaskThreadError(task *Task, threadId int, err error) *TaskThreadError {
	return &TaskThreadError{threadId: threadId, err: log.TaskThreadError(task.Name, threadId, err)}
}

//TaskConstructor creates TaskHandler instances
type TaskConstructor func() TaskHandler

//TaskPayloadHandler handles consumer task payload
type TaskPayloadHandler interface {
	HandlePayload(task *Task)

	OnStartConsume()
	OnEndConsume()
	OnQuitSignalTimeout()
}
